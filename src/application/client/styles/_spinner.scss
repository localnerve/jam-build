// -------------
// spinner.scss
//
// Copyright (c) 2025 Alex Grant (@localnerve), LocalNerve LLC
// Private use for LocalNerve, LLC only. Unlicensed for any other use. 
// -------------
@use 'vars' as v;

@property --spinner-start-angle {
  syntax: '<angle>';
  inherits: false;
  initial-value: 0deg;
}

@property --spinner-end-angle {
  syntax: '<angle>';
  inherits: false;
  initial-value: 360deg;
}

/* fallback */
@property --property-zero {
  syntax: '<number>';
  inherits: false;
  initial-value: 0;
}

.spinner {
  --sp-size: var(--spinner-size, 2em);
  --sp-ring-size: var(--spinner-ring-size, calc(var(--sp-size) / 10));
  --sp-duration: calc(2s / var(--spinner-speed, 1));

  box-sizing: border-box;
  width: var(--sp-size);
  height: var(--sp-size);
  // stylelint-disable-next-line plugin/no-unsupported-browser-features
  margin-inline: 1em;
  border-radius: 100vmax;
  background: 
      conic-gradient(transparent 0deg, transparent var(--spinner-start-angle), var(--spinner-color) var(--spinner-start-angle), var(--spinner-color) var(--spinner-end-angle), transparent var(--spinner-end-angle));
  // stylelint-disable-next-line plugin/no-unsupported-browser-features
  mask-image: radial-gradient(transparent calc(var(--sp-size) / 2 - var(--sp-ring-size) - 1px), black calc(var(--sp-size) / 2 - var(--sp-ring-size)));
  animation: spinner calc(var(--sp-duration) / 0.6) ease-in-out infinite, spin var(--sp-duration) linear infinite;
  
  /* remove border if @property is supported */
  border: var(--property-zero, var(--sp-ring-size)) solid color-mix(in hsl, currentcolor 10%, transparent);
  border-top: var(--property-zero, var(--sp-ring-size)) solid var(--spinner-color);
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@keyframes spinner {
  0% {
    --spinner-start-angle: 0deg;
    --spinner-end-angle: 10deg;
  }

  50% {
    --spinner-start-angle: 35deg;
    --spinner-end-angle: 315deg;
  }

  100% {
    --spinner-start-angle: 350deg;
    --spinner-end-angle: 360deg;
  }
}

.page-spinner {
  display: none;
  position: fixed;
  flex-flow: column nowrap;
  justify-content: center;
  align-items: center;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0; // stylelint-disable-line declaration-block-no-redundant-longhand-properties
  z-index: v.$z-index-spinner;
  background: rgb(34 34 34 / 50%);

  --spinner-size: 14rem;
  --spinner-ring-size: 1rem;

  .spinner {
    position: fixed;
    z-index: v.$z-index-spinner + 1;
  }
 
  &.show {
    display: flex;
  }

  &.backstop { // just be a blocking backstop
    display: flex;

    .spinner {
      display: none;
    }
  }
}